if(WITH_ROCKSDB)
    if(FIND_ROCKSDB)
        find_package(RocksDB CONFIG REQUIRED)
        find_package(ZLIB REQUIRED)
        set_target_properties(RocksDB::rocksdb PROPERTIES IMPORTED_GLOBAL TRUE)
        add_library(rocksdb ALIAS RocksDB::rocksdb)
    else()
        set(WITH_GFLAGS 0 CACHE BOOL "build with gflags")
        set(WITH_TESTS OFF CACHE BOOL "build with tests")
        set(FAIL_ON_WARNINGS OFF CACHE BOOL "fail on warnings")
        set(PORTABLE ON CACHE BOOL "build portable")
        set(CMAKE_DISABLE_FIND_PACKAGE_NUMA TRUE CACHE BOOL "disable find NUMA package")
        set(CMAKE_DISABLE_FIND_PACKAGE_gtest TRUE CACHE BOOL "disable find gtest package")
        set(CMAKE_DISABLE_FIND_PACKAGE_Git TRUE CACHE BOOL "disable find git package")
        set(FAIL_ON_WARNINGS OFF CACHE BOOL "add -Werror")
        set(ROCKSDB_BUILD_SHARED FALSE CACHE BOOL "build shared library alongside with static")
        set(WITH_BENCHMARK_TOOLS OFF CACHE BOOL "build with benchmarks")
        set(WITH_TOOLS OFF CACHE BOOL "build with tools")
        message(STATUS "Adding rocksdb")
        add_subdirectory(${CMAKE_SOURCE_DIR}/deps/rocksdb EXCLUDE_FROM_ALL)
        target_include_directories(rocksdb PUBLIC $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/deps/rocksdb/include>)
        disable_clang_tidy(rocksdb)
    endif()
endif()

if(TESTING)
    message(STATUS "Adding gtest")
    set(gtest_hide_internal_symbols TRUE CACHE BOOL "hide internal gtest symbols")
    set(INSTALL_GTEST FALSE CACHE BOOL "install gtest")
    set(BUILD_GMOCK ON CACHE BOOL "build gmock")
    set(BUILD_GTEST ON CACHE BOOL "build gtest")
    set(gtest_force_shared_crt OFF CACHE BOOL "force shared CRT")
    set(BUILD_SHARED_LIBS OFF CACHE BOOL "build static libs")

    add_subdirectory(${CMAKE_SOURCE_DIR}/deps/googletest EXCLUDE_FROM_ALL)
    disable_clang_tidy(gtest)
    disable_clang_tidy(gtest_main)
    disable_clang_tidy(gmock)
    disable_clang_tidy(gmock_main)
endif()
