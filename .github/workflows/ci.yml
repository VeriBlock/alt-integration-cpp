name: CI

on:
  push:
    branches:
      - master
      - release/*
  pull_request:
    branches:
      - master
      - trunk/*
      - release/*

jobs:
  linux-clang:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        flags: [
          "-DCLANG_TIDY=ON -DCMAKE_BUILD_TYPE=Debug",
          # build fuzzers and run 1 iteration (with fixed corpus) during ctest
          "-DASAN=ON -DFUZZING=ON -DCMAKE_BUILD_TYPE=Debug",
          "-DUBSAN=ON -DFUZZING=ON -DCMAKE_BUILD_TYPE=Debug",
          "-DVBK_NO_THREADS=ON -DCMAKE_BUILD_TYPE=Debug",
          "-DASAN=ON -DWITH_LEVELDB=ON -DWITH_C_WRAPPER=ON -DTESTING_GO=ON -DCMAKE_BUILD_TYPE=Debug",
          "-DASAN=ON -DWITH_ROCKSDB=ON -DWITH_C_WRAPPER=ON -DTESTING_GO=ON -DCMAKE_BUILD_TYPE=Debug",
          # release build with all dependencies with rocksdb
          "-DWITH_ROCKSDB=ON -DWITH_C_WRAPPER=ON -DTESTING_GO=ON -DWITH_PYPOPTOOLS=ON -DCMAKE_BUILD_TYPE=Release",
          # release build with all dependencies with leveldb
          "-DWITH_LEVELDB=ON -DWITH_C_WRAPPER=ON -DTESTING_GO=ON -DWITH_PYPOPTOOLS=ON -DCMAKE_BUILD_TYPE=Release",
        ]
    env:
      CC: clang
      CXX: clang++
      CTEST_OUTPUT_ON_FAILURE: 1
      VBK_FUZZ_CORPUS_DIR: ${{ github.workspace }}/fuzz-corpus
      ASAN_OPTIONS: detect_container_overflow=1:verbosity=1:debug=1:detect_leaks=1:check_initialization_order=1:alloc_dealloc_mismatch=true:use_odr_indicator=true
      UBSAN_OPTIONS: print_stacktrace=1
      PKG_CONFIG_PATH: /usr/lib/pkgconfig
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: checkout fuzz-corpus
        uses: actions/checkout@v2
        with:
          repository: VeriBlock/fuzz-corpus
          path: ${{ github.workspace }}/fuzz-corpus
      - name: update apt-get
        run: sudo apt-get update
      - name: install build requirements
        run: sudo apt-get install -y python3 python3-pip clang-tidy libboost-python-dev
      - name: install new cmake
        run: |
          pip3 install cmake
      - name: Prepare ccache timestamp
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        id: ccache_cache_timestamp
        run: |
          echo "::set-output name=timestamp::`date +%s`}"
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: linux-ccache-matrix-${{ matrix.flags }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            linux-ccache-matrix-${{ matrix.flags }}-
            linux-ccache-matrix-
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }}
      - name: build
        run: cmake --build build --parallel 2
      - name: install
        run: sudo cmake --install build
      - name: test
        run: cd build && ctest -j2

  linux-gcc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        flags: [
          "-DASAN=ON -DWITH_LEVELDB=ON -DWITH_C_WRAPPER=ON -DTESTING_GO=ON -DCMAKE_BUILD_TYPE=Debug",
          "-DASAN=ON -DWITH_ROCKSDB=ON -DWITH_C_WRAPPER=ON -DTESTING_GO=ON -DCMAKE_BUILD_TYPE=Debug",
          # release build with all dependencies with rocksdb
          "-DWITH_ROCKSDB=ON -DWITH_C_WRAPPER=ON -DTESTING_GO=ON -DWITH_PYPOPTOOLS=ON -DCMAKE_BUILD_TYPE=Release",
          # release build with all dependencies with leveldb
          "-DWITH_LEVELDB=ON -DWITH_C_WRAPPER=ON -DTESTING_GO=ON -DWITH_PYPOPTOOLS=ON -DCMAKE_BUILD_TYPE=Release",
        ]
    env:
      CC: gcc
      CXX: g++
      CTEST_OUTPUT_ON_FAILURE: 1
      VBK_FUZZ_CORPUS_DIR: ${{ github.workspace }}/fuzz-corpus
      ASAN_OPTIONS: detect_container_overflow=1:verbosity=1:debug=1:detect_leaks=1:check_initialization_order=1:alloc_dealloc_mismatch=true:use_odr_indicator=true
      UBSAN_OPTIONS: print_stacktrace=1
      PKG_CONFIG_PATH: /usr/lib/pkgconfig
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: checkout fuzz-corpus
        uses: actions/checkout@v2
        with:
          repository: VeriBlock/fuzz-corpus
          path: ${{ github.workspace }}/fuzz-corpus
      - name: update apt-get
        run: sudo apt-get update
      - name: install build requirements
        run: sudo apt-get install -y python3 python3-pip libboost-python-dev ccache sudo
      - name: install new cmake
        run: pip3 install cmake
      - name: Prepare ccache timestamp
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        id: ccache_cache_timestamp
        run: |
          echo "::set-output name=timestamp::`date +%s`}"
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: linux-ccache-matrix-${{ matrix.flags }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            linux-ccache-matrix-${{ matrix.flags }}-
            linux-ccache-matrix-
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }}
      - name: build
        run: cmake --build build --parallel 2
      - name: install
        run: sudo cmake --install build
      - name: test
        run: cd build && ctest -j2

  coverage:
    runs-on: ubuntu-latest
    env:
      CC: gcc
      CXX: g++
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: Prepare ccache timestamp
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        id: ccache_cache_timestamp
        run: |
          echo "::set-output name=timestamp::`date +%s`}"
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: linux-ccache-coverage-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            linux-ccache-coverage-
      - name: install new cmake
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip ccache
          pip3 install -U cmake gcovr fastcov
      - name: versions
        run: |
          $CC --version
          gcov --version
      - name: cmake
        run: cmake . -Bbuild -DCOVERAGE=ON -DCODE_COVERAGE_VERBOSE=ON
      - name: build
        run: cmake --build build --parallel 2
      - name: test
        run: cmake --build build --target ctest_coverage_lcov
      - uses: codecov/codecov-action@v2
        with:
          directory: build
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          flags: unittests # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
# TODO: figure out why this takes 2h to run
#      - name: Setup sonarqube
#        uses: warchant/setup-sonar-scanner@v1
#      - name: Run sonarqube
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: sonar-scanner
#          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  windows:
    runs-on: windows-latest
    env:
      CTEST_OUTPUT_ON_FAILURE: 1
      VCPKG_DEFAULT_TRIPLET: x64-windows
      BUILDCACHE_DIR: ~\.cache
      BUILDCACHE_DEBUG: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
          fetch-depth: 1
      - name: Prepare ccache timestamp
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        id: cache_timestamp
        run: |
          echo "::set-output name=timestamp::$(Get-Date -Format o | ForEach-Object { $_ -replace ":", "." })"
      - name: cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~\.cache
          key: windows-buildcache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            windows-buildcache-
      - name: install buildcache
        shell: powershell
        run: |
          wget https://github.com/mbitsnbites/buildcache/releases/download/v0.18.0/buildcache-win-msvc.zip -outfile buildcache-win-msvc.zip
          Expand-Archive .\buildcache-win-msvc.zip
          mkdir C:\buildcache\
          mv .\buildcache-win-msvc\bin\buildcache.exe C:\buildcache\
          $oldPath = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
          $newPath = "$oldPath;c:\buildcache"
          Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newPath
      - name: show buildcache config
        run: |
          $env:Path += ";c:\buildcache"
          buildcache -s
      - name: "Run vcpkg"
        run: |
          vcpkg install zlib
      - name: cmake
        run: |
          $env:Path += ";c:\buildcache"
          cmake . -Bbuild -A x64 -Dprotobuf_BUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE
      - name: build
        run: |
          $env:Path += ";c:\buildcache"
          cmake --build build --parallel 2
#      TODO: takes TOO long to run tess
#      - name: test
#        run: cmake --build build --target RUN_TESTS

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        flags: ["-DCMAKE_BUILD_TYPE=Release -DASAN=ON"]
    env:
      CC: clang
      CXX: clang++
      CTEST_OUTPUT_ON_FAILURE: 1
      ASAN_OPTIONS: detect_container_overflow=0:verbosity=1:debug=1:check_initialization_order=1:alloc_dealloc_mismatch=true:use_odr_indicator=true
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: macos-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            macos-ccache-
      - name: install ccache
        run: brew install ccache
      - uses: warchant/setup-mold@v1
        with:
          version: v1.0.3
          default: true
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }} -DCMAKE_BUILD_TYPE=Release
      - name: build
        run: cmake --build build --parallel 2
      - name: test
        run: cd build && ctest -j2
