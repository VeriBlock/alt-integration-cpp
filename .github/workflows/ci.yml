name: CI

on:
  push:
    branches:
      - master
      - release/*
  pull_request:
    branches:
      - master
      - trunk/*
      - release/*

jobs:
  linux:
    runs-on: ubuntu-18.04
    container: veriblock/alt-integration-cpp-dev
    strategy:
      fail-fast: false
      matrix:
        flags: [
          "-DCLANG_TIDY=ON",
          "-DASAN=ON",
          "-DUBSAN=ON",
          "-DWITH_PYPOPMINER=ON -DCMAKE_BUILD_TYPE=Release"
        ]
    env:
      CC: clang
      CXX: clang++
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: Prepare ccache timestamp
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        id: ccache_cache_timestamp
        run: |
          echo "::set-output name=timestamp::`date +%s`}"
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: linux-ccache-matrix-${{ matrix.flags }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            linux-ccache-matrix-${{ matrix.flags }}-
            linux-ccache-matrix-
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }}
      - name: build
        run: cmake --build build -- -j2 install
      - name: test
        run: cd build && ctest


  coverage:
    runs-on: ubuntu-18.04
    container: veriblock/alt-integration-cpp-dev
    env:
      CC: gcc
      CXX: g++
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: Prepare ccache timestamp
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        id: ccache_cache_timestamp
        run: |
          echo "::set-output name=timestamp::`date +%s`}"
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: linux-ccache-coverage-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            linux-ccache-coverage-
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }} -DCOVERAGE=ON
      - name: build
        run: cmake --build build -- -j2
      - name: test
        run: cmake --build build --target ctest_coverage
      - name: collect coverage
        shell: bash
        run: bash <(curl -s https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }}
      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v1
      - name: Run sonarqube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sonar-scanner
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  windows:
    runs-on: windows-latest
    env:
      CTEST_OUTPUT_ON_FAILURE: 1
      VCPKG_DEFAULT_TRIPLET: x64-windows
      BUILDCACHE_DIR: ~\.cache
      BUILDCACHE_DEBUG: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
          fetch-depth: 1
      - name: Prepare ccache timestamp
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        id: cache_timestamp
        run: |
          echo "::set-output name=timestamp::$(Get-Date -Format o | ForEach-Object { $_ -replace ":", "." })"
      - name: cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~\.cache
          key: windows-buildcache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            windows-buildcache-
      - name: install buildcache
        shell: powershell
        run: |
          wget https://github.com/mbitsnbites/buildcache/releases/download/v0.18.0/buildcache-win-msvc.zip -outfile buildcache-win-msvc.zip
          Expand-Archive .\buildcache-win-msvc.zip
          mkdir C:\buildcache\
          mv .\buildcache-win-msvc\bin\buildcache.exe C:\buildcache\
          $oldPath = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
          $newPath = "$oldPath;c:\buildcache"
          Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newPath
      - name: show buildcache config
        run: |
          $env:Path += ";c:\buildcache"
          buildcache -s
      - name: cmake
        run: |
          $env:Path += ";c:\buildcache"
          cmake . -Bbuild -A x64 -DCMAKE_BUILD_TYPE=Release -DSHARED=OFF -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE
      - name: build
        run: |
          $env:Path += ";c:\buildcache"
          cmake --build build --parallel 2
#      - name: test
#        run: cmake --build build --target RUN_TESTS

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        flags: ["-DCMAKE_BUILD_TYPE=Release"]
    env:
      CC: clang
      CXX: clang++
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: macos-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            macos-ccache-
      - name: install homebrew
        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
      - name: install ccache
        run: |
          brew install ccache
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }} -DCMAKE_BUILD_TYPE=Release
      - name: build
        run: cmake --build build -- -j2
      - name: test
        run: cd build && ctest

  x86_64-apple-darwin16:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        flags: ["-DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${GITHUB_WORKSPACE}/cctools/toolchain/bin/clang -DCMAKE_CXX_COMPILER=${GITHUB_WORKSPACE}/cctools/toolchain/bin/clang++ -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_SYSTEM_PROCESSOR=x86_64 -DCMAKE_C_COMPILER_TARGET=x86_64-apple-darwin16 -DCMAKE_CXX_COMPILER_TARGET=x86_64-apple-darwin16 -DCMAKE_OSX_SYSROOT=${GITHUB_WORKSPACE}/SDKs/MacOSX10.14.sdk -DTESTING=OFF"]
    env:
      PKG_CLANG_VERSION: 6.0.1
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v1
        name: checkout
        with:
          submodules: recursive
          clean: true
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: darwin-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            darwin-ccache-
      - name: toolchain cache files
        id: toolchain-cache
        uses: actions/cache@v1.1.0
        with:
          path: cctools
          key: toolchain-full-cache
      - name: sdk cache files
        id: sdk-cache
        uses: actions/cache@v1.1.0
        with:
          path: SDKs
          key: sdk-cache
      - name: clone native_cctools
        if: steps.toolchain-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@master
        with:
          repository: tpoechtrager/cctools-port
          ref: 3764b223c011574971ee3ae09ce968ba5dc2f00f
          path: cctools/toolchain
      - name: clone apple-libtapi
        if: steps.toolchain-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@master
        with:
          repository: tpoechtrager/apple-libtapi
          ref: 3efb201881e7a76a21e0554906cf306432539cef
          path: cctools/libtapi
      - name: fetch clang+llvm
        if: steps.toolchain-cache.outputs.cache-hit != 'true'
        run: |
          wget https://mirror2.veriblock.org/vbtc-sources/clang+llvm-${PKG_CLANG_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz
      - name: extract clang+llvm
        if: steps.toolchain-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p cctools && \
          mkdir -p toolchain/bin toolchain/lib/clang/${PKG_CLANG_VERSION}/include && \
          mkdir -p libtapi && \
          mkdir -p cctools/clang && \
          rm -f toolchain/lib/libc++abi.so*
          tar --no-same-owner --strip-components=1 -C cctools/clang -xf clang+llvm-${PKG_CLANG_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz
          rm -f clang+llvm-${PKG_CLANG_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz
      - name: install clang+llvm, cctools & libtapi
        if: steps.toolchain-cache.outputs.cache-hit != 'true'
        run: |
          cd ${GITHUB_WORKSPACE}/cctools/libtapi
          CC=${GITHUB_WORKSPACE}/cctools/clang/bin/clang CXX=${GITHUB_WORKSPACE}/cctools/clang/bin/clang++ INSTALLPREFIX=${GITHUB_WORKSPACE}/cctools ./build.sh && \
          CC=${GITHUB_WORKSPACE}/cctools/clang/bin/clang CXX=${GITHUB_WORKSPACE}/cctools/clang/bin/clang++ INSTALLPREFIX=${GITHUB_WORKSPACE}/cctools ./install.sh && \
          sed -i.old "/define HAVE_PTHREADS/d" ${GITHUB_WORKSPACE}/cctools/toolchain/cctools/ld64/src/ld/InputFiles.h
          mkdir -p ${GITHUB_WORKSPACE}/cctools/clang/lib/ && \
          cp ${GITHUB_WORKSPACE}/cctools/lib/libtapi.so.6 ${GITHUB_WORKSPACE}/cctools/clang/lib/
          cd ${GITHUB_WORKSPACE}/cctools/toolchain/cctools
          CC=${GITHUB_WORKSPACE}/cctools/clang/bin/clang CXX=${GITHUB_WORKSPACE}/cctools/clang/bin/clang++ && ./configure \
              --prefix=${GITHUB_WORKSPACE}/cctools/toolchain \
              --with-libtapi=${GITHUB_WORKSPACE}/cctools \
              --target=x86_64-apple-darwin16
          make install
          cd ${GITHUB_WORKSPACE}/cctools/clang && \
          mkdir -p ${GITHUB_WORKSPACE}/cctools/toolchain/lib/clang/${PKG_CLANG_VERSION}/include && \
          mkdir -p ${GITHUB_WORKSPACE}/cctools/toolchain/bin ${GITHUB_WORKSPACE}/cctools/toolchain/include && \
          cp bin/clang ${GITHUB_WORKSPACE}/cctools/toolchain/bin/ && \
          cp -P bin/clang++ ${GITHUB_WORKSPACE}/cctools/toolchain/bin/ && \
          cp lib/libtapi.so.6 ${GITHUB_WORKSPACE}/cctools/toolchain/lib/ && \
          cp lib/libLTO.so ${GITHUB_WORKSPACE}/cctools/toolchain/lib/ && \
          cp -rf lib/clang/${PKG_CLANG_VERSION}/include/* ${GITHUB_WORKSPACE}/cctools/toolchain/lib/clang/${PKG_CLANG_VERSION}/include/ && \
          cp bin/llvm-dsymutil ${GITHUB_WORKSPACE}/cctools/toolchain/bin/x86_64-apple-darwin16-dsymutil && \
          if `test -d include/c++/`; then cp -rf include/c++/ ${GITHUB_WORKSPACE}/cctools/toolchain/include/; fi && \
          if `test -d lib/c++/`; then cp -rf lib/c++/ ${GITHUB_WORKSPACE}/cctools/toolchain/lib/; fi
      - name: download and extract macos sdk
        if: steps.sdk-cache.outputs.cache-hit != 'true'
        run: |
          wget -P ${GITHUB_WORKSPACE}/sdk-sources https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
          mkdir -p ${GITHUB_WORKSPACE}/SDKs
          tar -xf ${GITHUB_WORKSPACE}/sdk-sources/MacOSX10.14.sdk.tar.xz -C ${GITHUB_WORKSPACE}/SDKs
      - name: cmake
        run: cmake . -Bbuild ${{ matrix.flags }}
      - name: build
        run: cmake --build build -- -j2
      - name: check architectures
        run: |
          OSX_ARCH=$(${GITHUB_WORKSPACE}/cctools/toolchain/bin/x86_64-apple-darwin16-lipo -info ${GITHUB_WORKSPACE}/build/lib/libveriblock-pop-cpp.a) && \
          echo $OSX_ARCH && \
          [[ $OSX_ARCH == "Non-fat file: ${GITHUB_WORKSPACE}/build/lib/libveriblock-pop-cpp.a is architecture: x86_64" ]] && exit 0